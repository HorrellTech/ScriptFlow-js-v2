if (typeof window.EXAMPLE_BLOCK_DEFINITIONS === 'undefined') {
    window.EXAMPLE_BLOCK_DEFINITIONS = {
        // ===== BASIC FLOW CONTROL EXAMPLES =====
        "start": {  // ALWAYS NEED A START BLOCK< TO START THE CODE
            type: "start",
            label: "Example Start",
            color: "#22c55e",
            category: "Flow Control Examples",
            hasFlowIn: false,
            hasFlowOut: false,
            hasNextFlowOut: true,
            inputs: [
                { name: "title", type: "string", label: "Program Title:" }
            ],
            toCode: function(block) {
                const title = block.data.title || "Example Program";
                return `// ${title}\n// Generated by ScriptFlow Example Blocks\n\n`;
            }
        },

        "example_sequence": {
            type: "example_sequence",
            label: "Sequential Steps",
            color: "#3b82f6",
            category: "Flow Control Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            inputs: [
                { name: "steps", type: "multiline", label: "Steps (one per line):", rows: 4 }
            ],
            toCode: function(block) {
                const steps = block.data.steps || "";
                if (!steps.trim()) return "";
                
                const stepLines = steps.split('\n').filter(line => line.trim());
                let code = "// Sequential Steps:\n";
                stepLines.forEach((step, index) => {
                    code += `// Step ${index + 1}: ${step.trim()}\n`;
                });
                code += "\n";
                return code;
            }
        },

        // ===== CONDITIONAL EXAMPLES =====
        "example_decision": {
            type: "example_decision",
            label: "Decision Point",
            color: "#f59e0b",
            category: "Logic Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            hasBranchFlowOut: true,
            hasElseBranchFlowOut: true,
            inputs: [
                { name: "question", type: "string", label: "Decision Question:" },
                { name: "condition", type: "string", label: "Condition to check:" }
            ],
            dataInputs: [
                { name: "test_value", type: "any", label: "Test Value" }
            ],
            toCode: function(block, nextBlockCode, branchBlockCode, elseBranchBlockCode) {
                const question = block.data.question || "Make a decision";
                const condition = block.data.condition || "true";
                
                // Try to get connected value
                let testValue = null;
                if (typeof getConnectedValue === 'function') {
                    testValue = getConnectedValue(block, "test_value");
                }
                
                const finalCondition = testValue ? `${testValue} ${condition}` : condition;
                
                let code = `// Decision: ${question}\n`;
                code += `if (${finalCondition}) {\n`;
                
                if (branchBlockCode) {
                    code += branchBlockCode.split('\n').map(line => line ? `  ${line}` : line).join('\n').trimEnd() + "\n";
                } else {
                    code += "  // True path\n";
                }
                
                if (elseBranchBlockCode) {
                    code += "} else {\n";
                    code += elseBranchBlockCode.split('\n').map(line => line ? `  ${line}` : line).join('\n').trimEnd() + "\n";
                }
                
                code += "}\n";
                return code;
            }
        },

        // ===== DATA MANIPULATION EXAMPLES =====
        "example_data_processor": {
            type: "example_data_processor",
            label: "Data Processor",
            color: "#8b5cf6",
            category: "Data Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            inputs: [
                { name: "operation", type: "select", label: "Operation:",
                  options: [
                      { value: "transform", label: "Transform" },
                      { value: "filter", label: "Filter" },
                      { value: "aggregate", label: "Aggregate" },
                      { value: "validate", label: "Validate" }
                  ]
                },
                { name: "description", type: "string", label: "Operation Description:" }
            ],
            dataInputs: [
                { name: "input_data", type: "any", label: "Input Data" },
                { name: "parameters", type: "object", label: "Parameters" }
            ],
            dataOutputs: [
                { name: "output_data", type: "any", label: "Processed Data" },
                { name: "metadata", type: "object", label: "Process Info" }
            ],
            toCode: function(block) {
                const operation = block.data.operation || "transform";
                const description = block.data.description || "Process data";
                
                let inputData = "inputData";
                let parameters = "{}";
                
                if (typeof getConnectedValue === 'function') {
                    const connectedInput = getConnectedValue(block, "input_data");
                    const connectedParams = getConnectedValue(block, "parameters");
                    
                    if (connectedInput) inputData = connectedInput;
                    if (connectedParams) parameters = connectedParams;
                }
                
                return `// ${description}\nconst processedData = ${operation}Data(${inputData}, ${parameters});\n`;
            },
            getValue: function(block, outputName) {
                if (outputName === "output_data") {
                    return "processedData";
                } else if (outputName === "metadata") {
                    return "{ processed: true, timestamp: Date.now() }";
                }
                return null;
            }
        },

        // ===== CONTAINER EXAMPLES =====
        "example_loop_container": {
            type: "example_loop_container",
            label: "Repeat Container",
            color: "#dc2626",
            category: "Loop Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            hasBranchFlowOut: true,
            isContainer: true,
            inputs: [
                { name: "loopType", type: "select", label: "Loop Type:",
                  options: [
                      { value: "count", label: "Count-based" },
                      { value: "while", label: "While condition" },
                      { value: "forEach", label: "For each item" }
                  ]
                },
                { name: "parameter", type: "string", label: "Parameter:" }
            ],
            dataInputs: [
                { name: "collection", type: "array", label: "Collection" }
            ],
            toCode: function(block, nextBlockCode, branchBlockCode) {
                const loopType = block.data.loopType || "count";
                const parameter = block.data.parameter || "10";
                
                let code = "";
                
                switch (loopType) {
                    case "count":
                        code = `// Repeat ${parameter} times\n`;
                        code += `for (let i = 0; i < ${parameter}; i++) {\n`;
                        break;
                    case "while":
                        code = `// While ${parameter}\n`;
                        code += `while (${parameter}) {\n`;
                        break;
                    case "forEach":
                        let collection = "items";
                        if (typeof getConnectedValue === 'function') {
                            const connectedCollection = getConnectedValue(block, "collection");
                            if (connectedCollection) collection = connectedCollection;
                        }
                        code = `// For each item in collection\n`;
                        code += `${collection}.forEach((${parameter || 'item'}) => {\n`;
                        break;
                }
                
                if (branchBlockCode) {
                    code += branchBlockCode.split('\n').map(line => line ? `  ${line}` : line).join('\n').trimEnd() + "\n";
                } else {
                    code += "  // Loop body\n";
                }
                
                code += loopType === "forEach" ? "});\n" : "}\n";
                return code;
            }
        },

        // ===== INPUT/OUTPUT EXAMPLES =====
        "example_user_interaction": {
            type: "example_user_interaction",
            label: "User Interaction",
            color: "#10b981",
            category: "I/O Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            inputs: [
                { name: "interactionType", type: "select", label: "Interaction:",
                  options: [
                      { value: "prompt", label: "Ask Question" },
                      { value: "alert", label: "Show Message" },
                      { value: "confirm", label: "Yes/No Question" },
                      { value: "display", label: "Display Data" }
                  ]
                },
                { name: "message", type: "string", label: "Message:" }
            ],
            dataInputs: [
                { name: "display_data", type: "any", label: "Data to Display" }
            ],
            dataOutputs: [
                { name: "user_response", type: "string", label: "User Response" }
            ],
            toCode: function(block) {
                const interactionType = block.data.interactionType || "alert";
                const message = block.data.message || "Hello!";
                
                let displayData = null;
                if (typeof getConnectedValue === 'function') {
                    displayData = getConnectedValue(block, "display_data");
                }
                
                switch (interactionType) {
                    case "prompt":
                        return `const userResponse = prompt("${message}");\n`;
                    case "alert":
                        const alertMessage = displayData ? `${message}: ${displayData}` : message;
                        return `alert("${alertMessage}");\n`;
                    case "confirm":
                        return `const userChoice = confirm("${message}");\n`;
                    case "display":
                        if (displayData) {
                            return `console.log("${message}", ${displayData});\n`;
                        } else {
                            return `console.log("${message}");\n`;
                        }
                    default:
                        return `// Unknown interaction type\n`;
                }
            },
            getValue: function(block) {
                const interactionType = block.data.interactionType || "alert";
                if (interactionType === "prompt") {
                    return "userResponse";
                } else if (interactionType === "confirm") {
                    return "userChoice";
                }
                return null;
            }
        },

        // ===== FUNCTION EXAMPLES =====
        "example_function_def": {
            type: "example_function_def",
            label: "Function Definition",
            color: "#7c3aed",
            category: "Function Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            hasBranchFlowOut: true,
            isContainer: true,
            inputs: [
                { name: "functionName", type: "string", label: "Function Name:" },
                { name: "parameters", type: "string", label: "Parameters:" },
                { name: "description", type: "string", label: "Description:" }
            ],
            toCode: function(block, nextBlockCode, branchBlockCode) {
                const functionName = block.data.functionName || "myFunction";
                const parameters = block.data.parameters || "";
                const description = block.data.description || "";
                
                let code = "";
                if (description) {
                    code += `/**\n * ${description}\n */\n`;
                }
                
                code += `function ${functionName}(${parameters}) {\n`;
                
                if (branchBlockCode) {
                    code += branchBlockCode.split('\n').map(line => line ? `  ${line}` : line).join('\n').trimEnd() + "\n";
                } else {
                    code += "  // Function body\n";
                }
                
                code += "}\n";
                return code;
            }
        },

        // ===== COMPLEX DATA EXAMPLES =====
        "example_object_builder": {
            type: "example_object_builder",
            label: "Object Builder",
            color: "#0891b2",
            category: "Data Examples",
            hasFlowIn: false,
            hasFlowOut: false,
            inputs: [
                { name: "objectName", type: "string", label: "Object Name:" },
                { name: "properties", type: "multiline", label: "Properties (key:value per line):", rows: 5 }
            ],
            dataInputs: [
                { name: "dynamic_props", type: "object", label: "Dynamic Properties" }
            ],
            dataOutputs: [
                { name: "built_object", type: "object", label: "Built Object" }
            ],
            toCode: function(block) {
                return ""; // Objects are usually created inline when used
            },
            getValue: function(block) {
                const objectName = block.data.objectName || "myObject";
                const properties = block.data.properties || "";
                
                let objCode = "{\n";
                
                // Parse static properties
                if (properties.trim()) {
                    const propLines = properties.split('\n').filter(line => line.trim());
                    propLines.forEach(line => {
                        const [key, value] = line.split(':').map(s => s.trim());
                        if (key && value) {
                            objCode += `  ${key}: ${value},\n`;
                        }
                    });
                }
                
                // Add dynamic properties if connected
                let dynamicProps = null;
                if (typeof getConnectedValue === 'function') {
                    dynamicProps = getConnectedValue(block, "dynamic_props");
                    if (dynamicProps) {
                        objCode += `  ...${dynamicProps},\n`;
                    }
                }
                
                objCode += "}";
                return objCode;
            }
        },

        // ===== ERROR HANDLING EXAMPLES =====
        "example_error_handler": {
            type: "example_error_handler",
            label: "Error Handler",
            color: "#ef4444",
            category: "Error Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            hasTryBranchFlowOut: true,
            hasCatchBranchFlowOut: true,
            isContainer: true,
            inputs: [
                { name: "errorVariable", type: "string", label: "Error Variable Name:" },
                { name: "description", type: "string", label: "What might go wrong:" }
            ],
            toCode: function(block, nextBlockCode, tryBlockCode, catchBlockCode) {
                const errorVariable = block.data.errorVariable || "error";
                const description = block.data.description || "";
                
                let code = "";
                if (description) {
                    code += `// Try: ${description}\n`;
                }
                
                code += "try {\n";
                if (tryBlockCode) {
                    code += tryBlockCode.split('\n').map(line => line ? `  ${line}` : line).join('\n').trimEnd() + "\n";
                } else {
                    code += "  // Code that might fail\n";
                }
                
                code += `} catch (${errorVariable}) {\n`;
                if (catchBlockCode) {
                    code += catchBlockCode.split('\n').map(line => line ? `  ${line}` : line).join('\n').trimEnd() + "\n";
                } else {
                    code += `  console.error("Error occurred:", ${errorVariable});\n`;
                }
                code += "}\n";
                
                return code;
            }
        },

        // ===== ADVANCED EXAMPLES =====
        "example_async_operation": {
            type: "example_async_operation",
            label: "Async Operation",
            color: "#6366f1",
            category: "Advanced Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            hasBranchFlowOut: true,
            isContainer: true,
            inputs: [
                { name: "operationType", type: "select", label: "Operation Type:",
                  options: [
                      { value: "fetch", label: "Fetch Data" },
                      { value: "timeout", label: "Wait/Delay" },
                      { value: "promise", label: "Custom Promise" }
                  ]
                },
                { name: "parameter", type: "string", label: "Parameter:" }
            ],
            dataInputs: [
                { name: "async_input", type: "any", label: "Async Input" }
            ],
            dataOutputs: [
                { name: "result", type: "any", label: "Async Result" }
            ],
            toCode: function(block, nextBlockCode, branchBlockCode) {
                const operationType = block.data.operationType || "fetch";
                const parameter = block.data.parameter || "";
                
                let asyncInput = null;
                if (typeof getConnectedValue === 'function') {
                    asyncInput = getConnectedValue(block, "async_input");
                }
                
                let code = "// Async operation\n";
                
                switch (operationType) {
                    case "fetch":
                        const url = asyncInput || `"${parameter}"` || '"https://api.example.com/data"';
                        code += `fetch(${url})\n`;
                        code += "  .then(response => response.json())\n";
                        code += "  .then(data => {\n";
                        break;
                    case "timeout":
                        const delay = parameter || "1000";
                        code += `setTimeout(() => {\n`;
                        break;
                    case "promise":
                        code += `new Promise((resolve, reject) => {\n`;
                        break;
                }
                
                if (branchBlockCode) {
                    const indent = operationType === "fetch" ? "    " : "  ";
                    code += branchBlockCode.split('\n').map(line => line ? `${indent}${line}` : line).join('\n').trimEnd() + "\n";
                }
                
                if (operationType === "fetch") {
                    code += "  })\n";
                    code += "  .catch(error => console.error('Fetch error:', error));\n";
                } else if (operationType === "timeout") {
                    const delay = parameter || "1000";
                    code += `}, ${delay});\n`;
                } else {
                    code += "});\n";
                }
                
                return code;
            },
            getValue: function(block) {
                return "asyncResult";
            }
        },

        // ===== UTILITY EXAMPLES =====
        "example_comment_block": {
            type: "example_comment_block",
            label: "Documentation",
            color: "#6b7280",
            category: "Utility Examples",
            hasFlowIn: true,
            hasFlowOut: false,
            hasNextFlowOut: true,
            inputs: [
                { name: "title", type: "string", label: "Title:" },
                { name: "content", type: "multiline", label: "Documentation:", rows: 4 },
                { name: "style", type: "select", label: "Style:",
                  options: [
                      { value: "block", label: "Block Comment" },
                      { value: "line", label: "Line Comments" },
                      { value: "jsdoc", label: "JSDoc Style" },
                      { value: "section", label: "Section Header" }
                  ]
                }
            ],
            toCode: function(block) {
                const title = block.data.title || "";
                const content = block.data.content || "";
                const style = block.data.style || "block";
                
                if (!title && !content) return "";
                
                let code = "";
                
                switch (style) {
                    case "line":
                        if (title) code += `// ${title}\n`;
                        if (content) {
                            content.split('\n').forEach(line => {
                                if (line.trim()) code += `// ${line}\n`;
                            });
                        }
                        break;
                    case "jsdoc":
                        code += "/**\n";
                        if (title) code += ` * ${title}\n`;
                        if (content) {
                            if (title) code += " *\n";
                            content.split('\n').forEach(line => {
                                code += ` * ${line}\n`;
                            });
                        }
                        code += " */\n";
                        break;
                    case "section":
                        const separator = "=".repeat(Math.max(50, (title || content).length + 10));
                        code += `// ${separator}\n`;
                        if (title) code += `// ${title.toUpperCase()}\n`;
                        if (content) code += `// ${content}\n`;
                        code += `// ${separator}\n`;
                        break;
                    case "block":
                    default:
                        code += "/*\n";
                        if (title) code += `${title}\n`;
                        if (content) {
                            if (title) code += "\n";
                            code += content;
                        }
                        code += "\n*/\n";
                        break;
                }
                
                return code;
            }
        },

        // ===== VALUE EXAMPLES =====
        "example_constant": {
            type: "example_constant",
            label: "Constant Value",
            color: "#84cc16",
            category: "Value Examples",
            hasFlowIn: false,
            hasFlowOut: false,
            inputs: [
                { name: "name", type: "string", label: "Constant Name:" },
                { name: "value", type: "string", label: "Value:" },
                { name: "type", type: "select", label: "Type:",
                  options: [
                      { value: "string", label: "String" },
                      { value: "number", label: "Number" },
                      { value: "boolean", label: "Boolean" },
                      { value: "array", label: "Array" },
                      { value: "object", label: "Object" }
                  ]
                }
            ],
            dataOutputs: [
                { name: "constant_value", type: "any", label: "Value" }
            ],
            toCode: function(block) {
                return ""; // Constants are typically used inline
            },
            getValue: function(block) {
                const name = block.data.name || "CONSTANT";
                const value = block.data.value || "";
                const type = block.data.type || "string";
                
                switch (type) {
                    case "string":
                        return `"${value}"`;
                    case "number":
                        return value || "0";
                    case "boolean":
                        return value.toLowerCase() === "true" ? "true" : "false";
                    case "array":
                        return value || "[]";
                    case "object":
                        return value || "{}";
                    default:
                        return value;
                }
            }
        }
    };
}